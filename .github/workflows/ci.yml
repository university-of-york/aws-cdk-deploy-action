name: CI

on:
    pull_request:
        branches: '*'
    push:
        branches: '*'

env:
    CI: true

jobs:
    install:
        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [12.x]
        steps:
            - name: Checkout branch
              uses: actions/checkout@v2

            - name: Set up nodejs ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Get npm cache directory
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"

            - name: Cache npm directory
              uses: actions/cache@v2
              with:
                  path: ${{ steps.npm-cache.outputs.dir }}
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: NPM install
              run: npm ci

    test:
        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        runs-on: ubuntu-latest
        needs: [install]
        strategy:
            matrix:
                node-version: [12.x]
        steps:
            - name: Checkout branch
              uses: actions/checkout@v2

            - name: Set up nodejs ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Get npm cache directory
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"

            - name: Install dependencies
              run: npm install --prefer-offline --no-audit

            - name: NPM test
              run: npm t
    lint:
        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        needs: [install]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [12.x]
        steps:
            - name: Checkout branch
              uses: actions/checkout@v2

            - name: Set up nodejs ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Get npm cache directory
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"

            - name: Install dependencies
              run: npm install --prefer-offline --no-audit

            - name: NPM test
              run: npm run lint

    release:
        #if: "github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]')"
        needs: [install, test, lint]
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Get npm cache directory
              id: npm-cache
              run: |
                  echo "::set-output name=dir::$(npm config get cache)"

            - name: Setup Node.js with GitHub Package Registry
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
                  registry-url: ${{ secrets.REGISTRY_HOSTNAME }}
                  scope: '@university-of-york'

            - name: Semantic Release
              uses: cycjimmy/semantic-release-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: 00000000000000
              with:
                  semantic_version: 17
                  extra_plugins: |
                      @semantic-release/git
                      @semantic-release/changelog@5.0.1
                  dry_run: false
                  branch: add-release-action
            - name: Push updates to branch for new version
              if: steps.semantic.outputs.new_release_published == 'true'
              run: 'git push https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:refs/heads/v${{steps.semantic.outputs.new_release_version}}'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Publish To GitHub Package Registry
              if: steps.semantic.outputs.new_release_published == 'true'
              run: npm publish
              env:
                  NODE_AUTH_TOKEN: ${{ env.GITHUB_TOKEN }}
